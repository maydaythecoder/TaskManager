const handleFileChange = async (event) => {
  const files = event.target.files;

  if (files.length > 0) {
    const uploadedFile = files[0];

    // Create a storageInstance reference
    const storageInstanceRef = storageInstance.ref(`cover-photos/${authInstance.uid}/${uploadedFile.name}`);

    try {
      // Upload file to Firebase storageInstance
      const snapshot = await storageInstanceRef.put(uploadedFile);

      // Get the download URL
      const downloadURL = await snapshot.ref.getDownloadURL();

      console.log('File uploaded:', uploadedFile);
      console.log('File name:', uploadedFile.name);
      console.log('File size:', uploadedFile.size, 'bytes');
      console.log('File type:', uploadedFile.type);
      console.log('Download URL:', downloadURL);

      // Now you can store the download URL in db or perform any other actions

      // For example, you can add the download URL to a db document
      await db.collection('users').add({
        photoURL: downloadURL,
        // Add other fields as needed
      });

    } catch (error) {
      console.error('Error uploading file:', error.message);
    }
  }
};









Uploading and Saving the Image Reference:
// Assuming you have a file input for the profile picture
const uploadedFile = event.target.files[0];
const storageRef = firebase.storage().ref();
const userProfilePicRef = storageRef.child('path/to/save/' + file.name);

// Upload the file
const uploadTask = userProfilePicRef.put(uploadedFile);

uploadTask.then(() => {
  // Get the download URL
  userProfilePicRef.getDownloadURL().then((downloadURL) => {
    // Save the URL to the user's profile in the database
    const userRef = firebase.database().ref('users/' + userId);
    userRef.update({ profilePicture: downloadURL });
  });
});



Fetching and Displaying the Image:
import { useEffect, useState } from 'react';

const UserProfile = ({ userId }) => {
  const [profilePicUrl, setProfilePicUrl] = useState('');

  useEffect(() => {
    // Fetch user data
    const userRef = firebase.database().ref('users/' + userId);
    userRef.on('value', (snapshot) => {
      const userData = snapshot.val();
      setProfilePicUrl(userData.profilePicture);
    });
  }, [userId]);

  return (
    <div>
      {profilePicUrl && <img src={profilePicUrl} alt="User profile" />}
      {/* Rest of the profile component */}
    </div>
  );
};